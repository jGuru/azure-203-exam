#!/bin/bash
#The below script contains everything described here(https://docs.microsoft.com/bs-latn-ba/azure/batch/cli-samples) and what can be done with batch except the following so also refer to the example https://docs.microsoft.com/bs-latn-ba/azure/batch/scripts/batch-cli-sample-create-user-subscription-account

#Create a resource group

az group create --name myRg2 --location eastus
	
#Create a storage account

az storage account create --resource-group myRg2 --name mystorageaccount2509 --location eastus --sku Standard_LRS	
	
#Create a Batch account

az batch account create --name mybatchaccount2509 --storage-account mystorageaccount2509 --resource-group myRg2 --location eastus 

#To create and manage compute pools and jobs, you need to authenticate with Batch

az batch account login --name mybatchaccount2509 --resource-group myRg2 --shared-key-auth
	
# Create a new application. 
#Parameter 'application_name' must conform to the following pattern: '^[a-zA-Z0-9_-]+$'.
az batch application create --resource-group myRg2 --name mybatchaccount2509  --application-name "MyApplication"
	
# An application can reference multiple application executable packages
# of different versions. The executables and any dependencies need
# to be zipped up for the package. Once uploaded, the CLI attempts
# to activate the package so that it's ready for use.

#Refer https://docs.microsoft.com/en-us/cli/azure/batch/application/package?view=azure-cli-latest#az-batch-application-package-activate to explore more
#this is path of .zip file to upload with file name
az batch application package create --resource-group myRg2 --name mybatchaccount2509 --application-name MyApplication --package-file my-application-exe.zip --version 1.0
	

# Update the application to assign the newly added application
# package as the default version.
az batch application set --resource-group myRg2 --name mybatchaccount2509 --application-name MyApplication --default-version 1.0
	
# Retrieve a list of available images and node agent SKUs. the below command needs more investigation
#az batch pool node-agent-skus list
	
#Create a pool of compute nodes
#for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
az batch pool create --id mypool --vm-size Standard_A1_v2 --target-dedicated-nodes 2 --image canonical:ubuntuserver:16.04-LTS --node-agent-sku-id "batch.node.ubuntu 16.04" --start-task-command-line "/bin/bash -c printenv" --start-task-wait-for-success
	
# Change the pool to enable automatic scaling of compute nodes.
# This autoscale formula specifies that the number of nodes should be adjusted according
# to the number of active tasks, up to a maximum of 10 compute nodes.
#Need to check why it is not executes in PS as it is working in POrtal
az batch pool autoscale enable --pool-id mypool --auto-scale-formula "$averageActiveTaskCount = avg($ActiveTasks.GetSample(TimeInterval_Minute * 15)); $TargetDedicated = min(10, $averageActiveTaskCount);"
	
#Batch creates the pool immediately, but it takes a few minutes to allocate and start the compute nodes. During this time, the pool is in the resizing state. 
#To see the status of the pool, run the az batch pool show command. This command shows all the properties of the pool, and you can query for specific properties. 
#The following command gets the allocation state of the pool:

az batch pool show --pool-id mypool --query "allocationState"
	
#Continue the following steps to create a job and tasks while the pool state is changing. 
#The pool is ready to run tasks when the allocation state is steady and all the nodes are running.

#Create a job
#Now that you have a pool, create a job to run on it. A Batch job is a logical group for one or more tasks. 
#A job includes settings common to the tasks, such as priority and the pool to run tasks on.

az batch job create --id myjob --pool-id mypool
	
# Update the job so that it is automatically
# marked as completed once all the tasks are finished. possible values {noaction, terminatejob} once set can not be changed
#az batch job set --job-id myjob --on-all-tasks-complete terminatejob

# Monitor the status of the job.
az batch job show --job-id myjob

	
#Create tasks

#Now use the az batch task create command to create some tasks to run in the job. In this example, you create four identical tasks. 
#Each task runs a command-line to display the Batch environment variables on a compute node, and then waits 90 seconds. 
#When you use Batch, this command line is where you specify your app or script. 
#Batch provides a number of ways to deploy apps and scripts to compute nodes.
#The following Bash script creates 4 parallel tasks (mytask1 to mytask4).
#Following command can not be executed in PS due to looping so you can create one after the another
for i in {1..4} do  az batch task create --task-id mytask$i --job-id myjob --command-line "/bin/bash -c 'printenv | grep AZ_BATCH; sleep 90s'" done

# Update the job so that it is automatically
# marked as completed once all the tasks are finished. possible values {noaction, terminatejob} once set can not be changed
az batch job set --job-id myjob --on-all-tasks-complete terminatejob


# To add many tasks at once, specify the tasks
# in a JSON file, and pass it to the command. 
# For format, see https://github.com/Azure/azure-docs-cli-python-samples/blob/master/batch/run-job/tasks.json.
#az batch task create \
#    --job-id myjob \
#    --json-file tasks.json


#View task status
#After you create a task, Batch queues it to run on the pool. Once a node is available to run it, the task runs.
#The following example shows details about mytask1 running on one of the pool nodes.

az batch task show --job-id myjob --task-id mytask1
	
#View task output
#The following command lists the files created by mytask1:

az batch task file list --job-id myjob --task-id mytask1 --output table
	
#To download one of the output files to a local directory, use the az batch task file download command. In this example, task output is in stdout.txt.

az batch task file download --job-id myjob --task-id mytask1 --file-path stdout.txt --destination ./stdout.txt

#Clean up resources

az batch pool delete --pool-id mypool

az group delete --name myRg2 -y